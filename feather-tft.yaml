# Joel Krueger 8-6-2023
# This code is for the https://www.adafruit.com/product/5691
# 

esphome:
  name: feather-tft
  friendly_name: Feather_TFT

esp32:
  board: adafruit_feather_esp32s3
  framework:
    type: arduino

# Enable logging
logger:
  logs:
    component: ERROR

# Enable Home Assistant API
api:
  encryption:
    key: "zInNCOgHb8ygiGHGn5PS3QYNMOGEOw66yO+B+enizqk="

ota:
  password: "11e3403cadf53e1bee40cfdd896aa78e"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.4.66
    gateway: 192.168.4.1
    subnet: 255.255.255.0
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Feather-Tft Hotspot"

captive_portal:

time:
  - platform: homeassistant
    id: ha_time

binary_sensor:
  - platform: status
    name: "Node Status"
    id: system_status
    
  - platform: gpio
    pin: 
      number: GPIO0
      inverted: true
      mode:
        input: true
        pullup: true
    name: D0

  - platform: gpio
    pin:
      number: GPIO1
      mode:
        input: true
        pulldown: true
    name: D1

  - platform: gpio
    pin:
      number: GPIO2
      mode:
        input: true
        pulldown: true
    name: D2

output:
  - platform: ledc
    pin: GPIO45
    id: gpio45
    frequency: 2000

switch:
  - platform: gpio
    pin: GPIO7
    name: "TFT Power"
    id: tftpower
    restore_mode: RESTORE_DEFAULT_ON
 
  - platform: gpio
    pin: GPIO13
    name: "Onboard LED"
    id: led
  
  - platform: gpio
    pin: GPIO21
    name: "Neo Pixel Power"
    id: neopixelpower


light:
  - platform: neopixelbus
    type: GRB
    variant: WS2812
    pin: 33
    num_leds: 1
    id: neopixel
    method: esp32_rmt
    name: "neopixel"
    internal: false
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: monochromatic
    output: gpio45
    name: "TFT Backlight"
    id: tftbacklight
    restore_mode: RESTORE_DEFAULT_ON

# You can either setup the backlight as a switch like below or make it dimmable using a light output like above
# switch:
#   - platform: gpio
#     pin: GPIO45
#     name: "TFT Backlight"
#     id: tftbacklight
#     internal: true
#     restore_mode: RESTORE_DEFAULT_ON

i2c:
  sda: 3
  scl: 4
  scan: true
  id: bus_a

# Example configuration entry
sensor:
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 1800s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    id: wifi_strength
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"

  - platform: homeassistant
    id: temp
    entity_id: sensor.feather1_temperature

  - platform: homeassistant
    id: humidity
    entity_id: sensor.feather1_humidity

  # I had an adafuit sht40 temperature and humidity sensor in one of my projects
  #                                         https://www.adafruit.com/product/4885
  #- platform: sht4x
  #  i2c_id: bus_a
  #  temperature:
  #    name: "Temperature"
  #    id: Temperature
  #    accuracy_decimals: 2
  #    #filters:
  #    #  - lambda: return x * (9.0/5.0) + 32.0;
  #  humidity:
  #    name: "Humidity"
  #    id: Humidity
  #    accuracy_decimals: 2
  #  address: 0x44
  #  update_interval: 5s

font:
  - file: "gfonts://Roboto"
    id: roboto2
    size: 20

  - file: "gfonts://Roboto"
    id: roboto3
    size: 30

  - file: "gfonts://Roboto"
    id: roboto6
    size: 50

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_gray
    red: 50%
    green: 50%
    blue: 50%

image:
  - file: "images/sunny.png"
    id: sunny
    resize: 32x32
    type: RGB24
  - file: "images/cloudy.png"
    id: cloudy
    resize: 32x32
    type: RGB24
  - file: "images/partlycloudy.png"
    id: partlycloudy
    resize: 32x32
    type: RGB24
  - file: "images/rainy.png"
    id: rainy
    resize: 32x32
    type: RGB24
  - file: "images/pouring.png"
    id: pouring
    resize: 32x32
    type: RGB24
  - file: "images/lightning-rainy.png"
    id: lightningrainy
    resize: 32x32
    type: RGB24
  - file: "images/fog.png"
    id: fog
    resize: 32x32
    type: RGB24
  - file: "images/snow.png"
    id: snow
    resize: 32x32
    type: RGB24
  - file: "images/wifi00.png"
    id: wifi00
    resize: 32x32
    type: RGB24
  - file: "images/wifi33.png"
    id: wifi33
    resize: 32x32
    type: RGB24
  - file: "images/wifi66.png"
    id: wifi66
    resize: 32x32
    type: RGB24
  - file: "images/wifi100.png"
    id: wifi100
    resize: 32x32
    type: RGB24

text_sensor:
  - platform: homeassistant
    id: forecast
    entity_id: weather.forecast_home

spi:
  clk_pin: GPIO36
  mosi_pin: GPIO35
  force_sw: True

display:
  - platform: st7789v
    update_interval: 10s
    model: Custom
    height: 240
    width: 135
    offset_height: 52
    offset_width: 40
    rotation: 90
    cs_pin: GPIO42
    dc_pin: GPIO40
    reset_pin: GPIO41
    lambda: |-
      it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_blue));
      it.line(0, 63, it.get_width(), 63, id(my_blue));
      it.strftime((240 / 2), 30, id(roboto6), Color(63,255,127), TextAlign::CENTER, "%I:%M %p", id(ha_time).now());

      if (id(wifi_strength).state > 66) {
      it.image(20, 56, id(wifi100));
      } else if (id(wifi_strength).state > 33) {
      it.image(20, 56, id(wifi66));
      } else if (id(wifi_strength).state > 0) {
      it.image(20, 56, id(wifi33));
      } else {
      it.image(20, 56, id(wifi00));
      }

      if (id(forecast).state == "sunny") {
      it.image(190, 56, id(sunny));
      } else if (id(forecast).state == "cloudy") {
      it.image(190, 56, id(cloudy));
      } else if (id(forecast).state == "partlycloudy") {
      it.image(190, 56, id(partlycloudy));
      } else if (id(forecast).state == "rainy") {
      it.image(190, 56, id(rainy));
      } else if (id(forecast).state == "pouring") {
      it.image(190, 56, id(pouring));
      } else if (id(forecast).state == "lightning-rainy") {
      it.image(190, 56, id(lightningrainy));
      } else if (id(forecast).state == "lightning") {
      it.image(190, 56, id(lightningrainy));
      } else if (id(forecast).state == "fog") {
      it.image(190, 56, id(fog));
      } else if (id(forecast).state == "snow") {
      it.image(190, 56, id(snow));
      }


      //it.image(185, 56, id(sunny));
      it.printf((240 / 2), 80, id(roboto2), id(my_gray), TextAlign::CENTER, "OUTSIDE");
      it.printf((240 / 3) * 1 - 20, 110, id(roboto3), id(my_gray), TextAlign::CENTER, "%.f F", id(temp).state);
      it.printf((240 / 3) * 2 + 20, 110, id(roboto3), id(my_gray), TextAlign::CENTER, "%.f%%", id(humidity).state);
