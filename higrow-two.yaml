# Joel Krueger 8-6-2023
# LILYGO T-HiGrow sensor  https://www.lilygo.cc/products/t-higrow?variant=42347095130293
# In this code the processor will wake up every 30 minutes, send data to home assistant for 15 seconds, then go back to sleep
# Pressing the lower button will wake up the processor for 5 minutes to allow updates from home assistant

esphome:
  name: higrow-two
  friendly_name: HG2
  on_boot:
    priority: 900
    then:
      - delay: 1s
      - switch.turn_on: spower
      - logger.log: "On-board sensors have been powered on"
  on_shutdown:
    then:
      - switch.turn_off: spower
      - logger.log: "On-board sensors have been powered off"

esp32:
  board: lolin_d32
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "iDKKbu0GJ0OHfM2u2ZTSwTELWjSYl0JuMBVTqWH288M="

ota:
  password: "63dcc0ee12872ea61513eb9c495c04e6"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.4.60
    gateway: 192.168.4.1
    subnet: 255.255.255.0
  fast_connect: true
  power_save_mode: high

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Higrow-Two"
    password: ""

captive_portal:

i2c:
  sda: 25
  scl: 26
  scan: true
  id: bus_a
  setup_priority: -100

deep_sleep:
  sleep_duration: 3600s  # sleep time in seconds
  id: deep_sleep_system
  wakeup_pin: GPIO35
  wakeup_pin_mode: INVERT_WAKEUP
  run_duration: 
    default: 15s          # normal wake up time
    gpio_wakeup_reason: 5min  # lower button pressed wake up time

# Sensor power control pin , must set high
switch:
  - platform: gpio
    pin: GPIO4
    name: "Sensor Power"
    id: spower
    restore_mode: ALWAYS_OFF
    internal: true

sensor:
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 3s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"

  - platform: adc
    pin: GPIO32
    name: "Soil"
    update_interval: 10s
    attenuation: 11db
    unit_of_measurement: '%'
    accuracy_decimals: 2
    filters:
      - skip_initial: 1
      - calibrate_linear:
          # Map 0.0 (from sensor) to 0.0 (true value)
          - 3.08 -> 0.0
          - 1.42 -> 100.0

  - platform: adc
    pin: GPIO34
    name: "Salt"
    update_interval: 5s
    unit_of_measurement: '%'
    accuracy_decimals: 2
    filters:
      - skip_initial: 1
      - calibrate_linear:
          # Map 0.0 (from sensor) to 0.0 (true value)
          - 0.0 -> 0.0
          - 1.1 -> 100.0

  - platform: bh1750
    i2c_id: bus_a
    name: "Illuminance"
    address: 0x23
    update_interval: 5s
    accuracy_decimals: 2
    setup_priority: -200

  - platform: bme280
    i2c_id: bus_a
    temperature:
      name: "Temperature"
      accuracy_decimals: 2
      oversampling: 2x
      filters:
        - offset: -3
    pressure:
      name: "Pressure"
      accuracy_decimals: 2
      oversampling: 2x
    humidity:
      name: "Humidity"
      accuracy_decimals: 2
      oversampling: 2x
      filters:
        - offset: 6
    address: 0x77
    update_interval: 5s
    setup_priority: -100

# Battery V   This battery level is not very accurate but better than nothing
  - platform: adc
    pin: 33
    name: "Battery V"
    id: battery
    attenuation: 11db
    unit_of_measurement: 'V'
    update_interval: 1sec
    accuracy_decimals: 3
    filters:
      - skip_initial: 3
      - calibrate_linear:
          # Map 0.0 (from sensor) to 0.0 (true value)
          - 1.50 -> 3.30
          - 2.01 -> 4.10
      - sliding_window_moving_average:
          window_size: 7
          send_every: 4
          send_first_at: 4
    on_value:
      - lambda: >
          if (x > 4.23) {
            id(charging).publish_state(true);
            id(battcap).publish_state(((x - 4.56) / (4.64 - 4.56)) * 100);
            // id(deep_sleep_system).prevent_deep_sleep();
          } else {
            id(charging).publish_state(false);
            id(battcap).publish_state(((x - 3.2) / (4.11 - 3.2)) * 100);
            // id(deep_sleep_system).allow_deep_sleep();
          }
  
# Battery %
  - platform: template
    device_class: battery
    name: Battery Capacity
    id: battcap
    accuracy_decimals: 1
    unit_of_measurement: '%'

binary_sensor:
  - platform: gpio
    pin: 
      number: GPIO35
      inverted: True
    name: Wakeup Button

  - platform: template
    device_class: battery_charging
    name: Charging
    id: charging
