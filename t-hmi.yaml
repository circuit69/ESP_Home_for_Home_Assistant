# Joel Krueger 8-6-2023
# This code is for https://www.lilygo.cc/products/t-hmi
#  the code below uses entities from my home assistent, modify or delete the lines that give you an error

esphome:
  name: t-hmi
  friendly_name: T_HMI

# load some custom code to work with the display
# you should have copied this folder lilygo-thmis3-esphome/...   into your home assistant's config/esphome/
external_components:
  - source: lilygo-thmis3-esphome/components
    components: [tdisplays3]

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

# Enable logging
logger:
  logs:
    component: ERROR

# Enable Home Assistant API
api:
  encryption:
    key: "+5Hc20pj7uOsqe+BMMFypA7IdQcT3c42heOdXqXf2rE="

ota:
  password: "e939a8328e39bad2ee58653819bbfad6"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.4.73
    gateway: 192.168.4.1
    subnet: 255.255.255.0
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "T-Hmi Hotspot"

captive_portal:

time:
  - platform: homeassistant
    id: ha_time

binary_sensor:
  - platform: status
    name: "Node Status"
    id: system_status
    
  - platform: gpio
    pin: 
      number: GPIO0
      inverted: True
    name: b1
    
  - platform: gpio
    pin: 
      number: GPIO21
    name: reed
    #on_press:
    #  then:
    #    - light.toggle: backlight

# these are entities from my home assistant, delete or modify for your setup
  - platform: homeassistant
    id: plug1
    entity_id: switch.plug1_relay

  - platform: homeassistant
    id: plug2
    entity_id: switch.plug2_relay

  - platform: homeassistant
    id: wiz
    entity_id: light.wiz_rgbw_tunable_00fe68

  - platform: homeassistant
    id: led
    entity_id: light.qhm_032b

# define the areas on the touchscreen for custom buttons on the bottom of the screen
  - platform: touchscreen
    name: Touch1
    id: touch1
    x_min: 0
    x_max: 80
    y_min: 170
    y_max: 240

  - platform: touchscreen
    name: Touch2
    id: touch2
    x_min: 80
    x_max: 160
    y_min: 170
    y_max: 240

  - platform: touchscreen
    name: Touch3
    id: touch3
    x_min: 160
    x_max: 240
    y_min: 170
    y_max: 240

  - platform: touchscreen
    name: Touch4
    id: touch4
    x_min: 240
    x_max: 320
    y_min: 170
    y_max: 240

switch:
  - platform: gpio
    pin: GPIO10
    name: "Power Enable"
    id: PWR_EN
    restore_mode: RESTORE_DEFAULT_ON

  - platform: gpio
    pin: GPIO14
    name: "Power On"
    id: PWR_ON
    restore_mode: RESTORE_DEFAULT_ON

output:
  - platform: ledc
    pin: GPIO38
    id: gpio38
    frequency: 2000

light:
  - platform: monochromatic
    output: gpio38
    name: "Backlight"
    id: backlight
    restore_mode: RESTORE_DEFAULT_ON

# Example configuration entry
sensor:
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 1800s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    id: wifi_percent
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"

# a temperature sensor from my home assistant, delete or modify this section to work with your setup
  - platform: homeassistant
    id: temp
    entity_id: sensor.feather1_temperature
    #attribute: current_temperature

font:
  - file: "gfonts://Roboto"
    id: roboto10
    size: 10

  - file: "gfonts://Roboto"
    id: roboto20
    size: 20

  - file: "gfonts://Roboto"
    id: roboto
    size: 30

  - file: "gfonts://Roboto"
    id: roboto70
    size: 70

# copy the images to you home assistants config/esphome/images/ folder
image:
  - file: "images/sunny.png"
    id: sunny
    resize: 32x32
    type: RGB24
  - file: "images/cloudy.png"
    id: cloudy
    resize: 32x32
    type: RGB24
  - file: "images/partlycloudy.png"
    id: partlycloudy
    resize: 32x32
    type: RGB24
  - file: "images/rainy.png"
    id: rainy
    resize: 32x32
    type: RGB24
  - file: "images/pouring.png"
    id: pouring
    resize: 32x32
    type: RGB24
  - file: "images/lightning-rainy.png"
    id: lightningrainy
    resize: 32x32
    type: RGB24
  - file: "images/fog.png"
    id: fog
    resize: 64x64
    type: RGB24
  - file: "images/snow.png"
    id: snow
    resize: 32x32
    type: RGB24
  - file: "images/wifi00.png"
    id: wifi00
    resize: 32x32
    type: RGB24
  - file: "images/wifi33.png"
    id: wifi33
    resize: 32x32
    type: RGB24
  - file: "images/wifi66.png"
    id: wifi66
    resize: 32x32
    type: RGB24
  - file: "images/wifi100.png"
    id: wifi100
    resize: 32x32
    type: RGB24

text_sensor:
  - platform: homeassistant
    id: forecast
    entity_id: weather.forecast_home

spi:
  clk_pin: GPIO1
  mosi_pin: GPIO3
  miso_pin: GPIO4

touchscreen:
  platform: xpt2046
  id: my_touchscreen
  cs_pin: 2
  update_interval: 50ms
  #report_interval: 250ms
  threshold: 300
  calibration_x_min: 356
  calibration_x_max: 3570
  calibration_y_min: 262
  calibration_y_max: 3700
  swap_x_y: false
  #on_touch:        # uncomment these lines to show logs in home assistant
  #  - lambda: |-
  #      ESP_LOGI("T-HMI", "x=%d, y=%d, x_raw=%d, y_raw=%d",
  #        id(my_touchscreen).x,
  #        id(my_touchscreen).y,
  #        id(my_touchscreen).x_raw,
  #        id(my_touchscreen).y_raw
  #        );

display:
  - platform: tdisplays3
    id: disp
    update_interval: 1s
    rotation: 270
    lambda: |-
      it.rectangle(0,  0, it.get_width(), it.get_height() - 75, Color(0,0,255));
      it.line(0, 40, it.get_width(), 40, Color(0,0,255));   // header bar

      it.printf(5, 3, id(roboto), Color(191,191,191), TextAlign::TOP_LEFT, "ESPHome");
      it.printf((320 / 3) * 2 - 25, 10, id(roboto10), Color(127,127,191), TextAlign::CENTER, "Wifi Signal");
      it.printf((320 / 3) * 2 - 15, 26, id(roboto20), Color(127,127,191), TextAlign::CENTER, "%.f%%", id(wifi_percent).state);

      if (id(system_status).state) {
        it.print(315, 3, id(roboto), Color(0,191,0), TextAlign::TOP_RIGHT, "Online");
      } else {
        it.print(315, 3, id(roboto), Color(191,0,0), TextAlign::TOP_RIGHT, "Offline");
      }

      //it.strftime((320 / 2), (170 / 3) * 1 + 30, id(roboto70), Color(63,255,127), TextAlign::CENTER, "%H:%M:%S", id(ha_time).now()); //24hr w/ seconds
      it.strftime((320 / 2), (170 / 3) * 1 + 30, id(roboto70), Color(191,255,191), TextAlign::CENTER, "%I:%M %p", id(ha_time).now());  //12hr w/ AM,PM
      it.strftime(5, (170 / 3) * 2 + 15, id(roboto), Color(127,255,191), TextAlign::LEFT, "%m-%d-%Y", id(ha_time).now());

      if (id(wifi_percent).state > 66) {
      it.image(170, (170 / 3) * 2 + 15, id(wifi100));
      } else if (id(wifi_percent).state > 33) {
      it.image(170, (170 / 3) * 2 + 15, id(wifi66));
      } else if (id(wifi_percent).state > 0) {
      it.image(170, (170 / 3) * 2 + 15, id(wifi33));
      } else {
      it.image(170, (170 / 3) * 2 + 15, id(wifi00));
      }

      if (id(forecast).state == "sunny") {
      it.image(215, (170 / 3) * 2 + 15, id(sunny));
      } else if (id(forecast).state == "cloudy") {
      it.image(215, (170 / 3) * 2 + 15, id(cloudy));
      } else if (id(forecast).state == "partlycloudy") {
      it.image(215, (170 / 3) * 2 + 15, id(partlycloudy));
      } else if (id(forecast).state == "rainy") {
      it.image(215, (170 / 3) * 2 + 15, id(rainy));
      } else if (id(forecast).state == "pouring") {
      it.image(215, (170 / 3) * 2 + 15, id(pouring));
      } else if (id(forecast).state == "lightning-rainy") {
      it.image(215, (170 / 3) * 2 + 15, id(lightningrainy));
      } else if (id(forecast).state == "lightning") {
      it.image(215, (170 / 3) * 2 + 15, id(lightningrainy));
      } else if (id(forecast).state == "fog") {
      it.image(215, (170 / 3) * 2 + 15, id(fog));
      } else if (id(forecast).state == "snow") {
      it.image(215, (170 / 3) * 2 + 15, id(snow));
      }

#  the code below uses entities from my home assistent, modify or delete the lines that give you an error
      it.printf(285, (170 / 3) * 2 + 10, id(roboto10), Color(191,255,255), TextAlign::CENTER, "OUTSIDE");
      it.printf(315, (170 / 3) * 2 + 15, id(roboto), Color(191, 255, 255), TextAlign::RIGHT, "%.f F", id(temp).state);

      // button 1
      it.rectangle(1,  175, it.get_width() / 4 - 2, 70 - 10, Color(200,200,200));
      it.rectangle(2,  174, it.get_width() / 4 - 4, 70 - 8, Color(200,200,200));
      it.rectangle(3,  173, it.get_width() / 4 - 6, 70 - 6, Color(200,200,200));
      it.rectangle(4,  172, it.get_width() / 4 - 8, 70 - 4, Color(200,200,200));
      it.rectangle(5,  171, it.get_width() / 4 - 10, 70 - 2, Color(200,200,200));
      //it.filled_rectangle(7,  177, it.get_width() / 4 - 14, 70 - 14, Color(63,150,63));

      if (id(wiz).state) {
      it.filled_rectangle(7,  177, it.get_width() / 4 - 14, 70 - 14, Color(63,220,127));
      it.printf(50, 220, id(roboto20), Color(255, 255, 255), TextAlign::CENTER, "ON");
      } else {
      it.filled_rectangle(7,  177, it.get_width() / 4 - 14, 70 - 14, Color(63,150,63));
      it.printf(50, 220, id(roboto20), Color(191, 191, 191), TextAlign::CENTER, "OFF");
      }
      it.printf(40, 190, id(roboto20), Color(255, 255, 255), TextAlign::CENTER, "Wiz");

      // button 2
      it.rectangle(1 + 80,  175, it.get_width() / 4 - 2, 70 - 10, Color(200,200,200));
      it.rectangle(2 + 80,  174, it.get_width() / 4 - 4, 70 - 8, Color(200,200,200));
      it.rectangle(3 + 80,  173, it.get_width() / 4 - 6, 70 - 6, Color(200,200,200));
      it.rectangle(4 + 80,  172, it.get_width() / 4 - 8, 70 - 4, Color(200,200,200));
      it.rectangle(5 + 80,  171, it.get_width() / 4 - 10, 70 - 2, Color(200,200,200));
      //it.filled_rectangle(7 + 80,  177, it.get_width() / 4 - 14, 70 - 14, Color(63,220,127));

      if (id(led).state) {
      it.filled_rectangle(7 + 80,  177, it.get_width() / 4 - 14, 70 - 14, Color(63,220,127));
      it.printf(130, 220, id(roboto20), Color(255, 255, 255), TextAlign::CENTER, "ON");
      } else {
      it.filled_rectangle(7 + 80,  177, it.get_width() / 4 - 14, 70 - 14, Color(63,150,63));
      it.printf(130, 220, id(roboto20), Color(191, 191, 191), TextAlign::CENTER, "OFF");
      }
      it.printf(120, 190, id(roboto20), Color(255, 255, 255), TextAlign::CENTER, "LED");

      // button 3
      it.rectangle(1 + 160,  175, it.get_width() / 4 - 2, 70 - 10, Color(200,200,200));
      it.rectangle(2 + 160,  174, it.get_width() / 4 - 4, 70 - 8, Color(200,200,200));
      it.rectangle(3 + 160,  173, it.get_width() / 4 - 6, 70 - 6, Color(200,200,200));
      it.rectangle(4 + 160,  172, it.get_width() / 4 - 8, 70 - 4, Color(200,200,200));
      it.rectangle(5 + 160,  171, it.get_width() / 4 - 10, 70 - 2, Color(200,200,200));
      // it.filled_rectangle(7 + 160,  177, it.get_width() / 4 - 14, 70 - 14, Color(175,127,127));

      if (id(plug1).state) {
      it.filled_rectangle(7 + 160,  177, it.get_width() / 4 - 14, 70 - 14, Color(63,220,127));
      it.printf(210, 220, id(roboto20), Color(255, 255, 255), TextAlign::CENTER, "ON");
      } else {
      it.filled_rectangle(7 + 160,  177, it.get_width() / 4 - 14, 70 - 14, Color(63,150,63));
      it.printf(210, 220, id(roboto20), Color(191, 191, 191), TextAlign::CENTER, "OFF");
      }
      it.printf(200, 190, id(roboto20), Color(255, 255, 255), TextAlign::CENTER, "Plug 1");

      // button 4
      it.rectangle(1 + 240,  175, it.get_width() / 4 - 2, 70 - 10, Color(200,200,200));
      it.rectangle(2 + 240,  174, it.get_width() / 4 - 4, 70 - 8, Color(200,200,200));
      it.rectangle(3 + 240,  173, it.get_width() / 4 - 6, 70 - 6, Color(200,200,200));
      it.rectangle(4 + 240,  172, it.get_width() / 4 - 8, 70 - 4, Color(200,200,200));
      it.rectangle(5 + 240,  171, it.get_width() / 4 - 10, 70 - 2, Color(200,200,200));
      //it.filled_rectangle(7 + 240,  177, it.get_width() / 4 - 14, 70 - 14, Color(127,127,127));

      if (id(plug2).state) {
      it.filled_rectangle(7 + 240,  177, it.get_width() / 4 - 14, 70 - 14, Color(63,220,127));
      it.printf(290, 220, id(roboto20), Color(255, 255, 255), TextAlign::CENTER, "ON");
      } else {
      it.filled_rectangle(7 + 240,  177, it.get_width() / 4 - 14, 70 - 14, Color(63,150,63));
      it.printf(290, 220, id(roboto20), Color(191, 191, 191), TextAlign::CENTER, "OFF");
      }
      it.printf(280, 190, id(roboto20), Color(255, 255, 255), TextAlign::CENTER, "Plug 2");


      it.printf(20, (170 / 3) * 2 - 3, id(roboto20), Color(255, 255, 255), TextAlign::LEFT, "X = %i", id(my_touchscreen).x);
      it.printf(100, (170 / 3) * 2 - 3, id(roboto20), Color(255, 255, 255), TextAlign::LEFT, "Y = %i", id(my_touchscreen).y);